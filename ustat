#!/bin/bash
# simple collect data from linux system amd64, arm64, armel, armhf, i386, mips64el, mipsel, ppc64el, s390x
# and send to the timeseries databases
# cooking by dariusz@porczynski.net mishmash for now ... but working :)
# main goals: POSIX/GNU/Linux portability, simple and lightweight, used BASH only with a few standard
# dependiences

# selfupdate from github
case $1 in
    "--update")
    if ps -e >2&/dev/null; then _PS="ps -e"; else _PS="ps"; fi # check what command to show processes
    process=$($_PS | grep ustat | grep -v grep | grep -v $0)
    github_archive="https://github.com/visaroy/ustat/archive/refs/heads/master.zip"
    rm -R /tmp/ustat* > 2&/dev/null
    if ! wget -nv -O /tmp/ustat.zip --no-check-certificate $github_archive; then
      echo '[NOK] ERROR: there is no file $github_archive on the server...'
    else
      unzip -o -d /tmp /tmp/ustat.zip
      cd /tmp/ustat-master
      sh /tmp/ustat-master/install.sh --force
#      cd /tmp; rm -R /tmp/ustat*
    fi
    (sleep 2; /etc/init.d/ustat stop; sleep 2; /etc/init.d/ustat start)
    exit 0
    ;;
esac

# parse config file
config="/etc/ustat.conf"
influxdb_database=$(sed -nE "/^\[\[outputs\.influxdb\]\]/ { :l /^\s*[^#].*/ p; n; /^\[/ q; b l; }" /etc/ustat.conf \
| grep database \
| sed 's/ *= */=/g' \
| sed 's/database=//g' \
| sed 's/"//g' \
| tr -d ' ')
echo $influxdb_database

influxdb_host=$(sed -nE "/^\[\[outputs\.influxdb\]\]/ { :l /^\s*[^#].*/ p; n; /^\[/ q; b l; }" /etc/ustat.conf \
| grep urls \
| sed 's/\[//g' \
| sed 's/\]//g' \
| sed 's/ *= */=/g' \
| sed 's/urls=//g' \
| sed 's/"//g' \
| tr -d ' ')
echo $influxdb_host

interval=$(sed -nE "/^\[agent\]/ { :l /^\s*[^#].*/ p; n; /^\[/ q; b l; }" /etc/ustat.conf \
| grep " interval" \
| sed 's/ *= */=/g' \
| sed 's/interval=//g' \
| sed 's/"//g' \
| tr -d ' ')
echo $interval

interfaces=$(sed -nE "/^\[\[inputs\.net\]\]/ { :l /^\s*[^#].*/ p; n; /^\[/ q; b l; }" /etc/ustat.conf \
| grep "interfaces" \
| sed 's/ *= */=/g' \
| sed 's/\[/\(/g' \
| sed 's/\]/\)/g' \
| sed 's/,/ /g' \
| sed 's/interfaces=//g')
for network_interface in ${interfaces}; do
  network_interface=`echo $network_interface | tr -d '"()'`
  echo "$network_interface"
done

# . /etc/ustat.conf
# database based on mac address for now, TODO: crypted, based on UUID and/or hardware IDs
read_eth0_mac_address=`cat /sys/class/net/$network_interface/address | tr ':' ' ' | tr '\n' ' ' | sed 's/[[:space:]]//g'`

initialize_matrics () {
  $read_eth0_mac_address
#  /usr/share/opentsdb/bin/tsdb mkmetric $eth0_mac_address.proc.loadavg.1m
#  /usr/share/opentsdb/bin/tsdb mkmetric $eth0_mac_address.proc.loadavg.5m
#  /usr/share/opentsdb/bin/tsdb mkmetric $eth0_mac_address.proc.loadavg.15m
}

read_proc_loadavg () {
  eth0_mac_address=$1
  awk -v now=`date +%s` -v host=`hostname` \
  '{ print "put '$eth0_mac_address'.proc.loadavg.1m " now " " $1 " host=" host;
  print "put '$eth0_mac_address'.proc.loadavg.5m " now " " $2 " host=" host;
  print "put '$eth0_mac_address'.proc.loadavg.15m " now " " $3 " host=" host; }' /proc/loadavg
}

read_proc_load () {
  now_timestamp=`date +%s`
  awk '{ print $1 }' /proc/loadavg
#  proc_loadawg_1=(awk '{ print $1 }' /proc/loadavg)
#  echo $proc_loadavg_1
}

read_network_stats () {
  timestamp=`date +%s`
  rx=$(grep $1 /proc/net/dev | awk '{print $2}' | tr -d ' ')
  tx=$(grep $1 /proc/net/dev | awk '{print $10}' | tr -d ' ')
  network_usage=$(cat /proc/net/dev | grep "$1:" | cut -f2 -d':' | awk '{print $1}' | tr -d ' ')
  return
}

show_databases () {
  curl -G "$influxdb_host/query?pretty=true" --data-urlencode 'q=SHOW DATABASES'
}

read_database () {
#  echo "read influxdb_database at $influxdb_host/query?db=$influxdb_database&pretty=true"
  curl -G "$influxdb_host/query?db=$influxdb_database" --data-urlencode 'q=SELECT * FROM "$indluxdb_database"'
}

create_database () {
  echo "create database $influxdb_database"
#  curl -XPOST "$influxdb_host/query" -s --data-urlencode 'q=CREATE DATABASE "$influxdb_database"'
  curl -XPOST "$influxdb_host/query" -s --data-urlencode "q=CREATE DATABASE $influxdb_database"
}

drop_database () {
  echo "drop database $influxdb_database"
  curl -XPOST "$influxdb_host/query" -s --data-urlencode "q=DROP DATABASE $influxdb_database"
}

write_a_point_to_influxdb () {
  influxdb_database="$1"
  measurement="$2"
  tag1="$3"
  rx="$4"
  timestamp="$5"
  curl -i XPOST "$influxdb_host/write?db=$influxdb_database&precision=s" --data-binary "$measurement,interface=$tag1 rx=$rx $timestamp"
}

write_loop () {
  while true; do
    curl -i XPOST "$influxdb_host/write?db=h3test&precision=s" --data-binary "$influxdb_database,interface=$network_interface rx=$rx $timestamp"
    sleep $interval
    echo "done..."
  done
}

ustat_help () {
  echo -e "usage: ustat <-option>\n\
  -b \t\t\t verbose\n\
  -c \t\t\t read_database\n\
  -d \t\t\t drop_database\n\
  -i [database] \t database name\n\
  -o [network_interface] \t network interface eg. -o eth0\n\
  -p \t\t\t read_proc_load\n\
  -r \t\t\t read_database\n\
  -s \t\t\t show_databases\n\
  -t [interval] \t interval in seconds eg. -t 5\n\
  -w \t\t\t write a point to influxdb database\n\
"
}

while getopts 'b c d h i: o p r s t: w' opt
do
  case "${opt}" in
    b ) _VERBOSE="true"
    ;;
    c ) create_database
    ;;
    d ) drop_database
    ;;
    h ) ustat_help
    ;;
    i ) influxdb_database="$OPTARG"; echo "influxdb_database=$OPTARG"
    ;;
    o ) read_network_stats $network_interface; echo -e "timestamp=$timestamp rx=$rx tx=$tx"
    ;;
    p ) read_proc_load
    ;;
    r ) read_database
    ;;
    s ) show_databases
    ;;
    t ) interval="$OPTARG"
    ;;
    w )
    show_databases
    while true; do
      read_network_stats $network_interface
      echo -e "influxdb_database=$influxdb_database measurement=$influxdb_database tag1=$network_interface \
      rx=$rx tx=$tx timestamp=$timestamp"
      write_a_point_to_influxdb $influxdb_database $influxdb_database $network_interface $rx $timestamp
      sleep $interval
    done
    ;;
    :) echo "Option -$OPTARG requires an argument." >&2
    ;;
    * )  ustat_help; exit 0
    ;;
  esac
done
shift $((OPTIND-1))
