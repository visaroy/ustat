#!/bin/bash
# simple collect data from linux system amd64, arm64, armel, armhf, i386, mips64el, mipsel, ppc64el, s390x
# and send to the timeseries databases
# cooking by dariusz@porczynski.net mishmash for now ... but working :)
# main goals: POSIX/GNU/Linux portability, simple and lightweight, used BASH only with a few standard
# dependiences
set -x
# selfupdate from github
case $1 in
    "update"|"--update"|"install"|"--install")
    if ps -e >/dev/null 2>&1; then _PS="ps -e"; else _PS="ps"; fi # check what command to show processes
    process=$($_PS | grep ustat | grep -v grep | grep -v $0)
    github_archive="https://github.com/visaroy/ustat/archive/refs/heads/master.zip"
    rm -R /tmp/ustat* > /dev/null 2>&1
    if ! wget -nv -O /tmp/ustat.zip --no-check-certificate $github_archive; then
      echo '[NOK] ERROR: there is no file $github_archive on the server... exit'
      exit 1
    else
      unzip -o -d /tmp /tmp/ustat.zip
      cd /tmp/ustat-master
      rm /usr/bin/ustat >/dev/null 2>&1
      rm /etc/init.d/ustat >/dev/null 2>&1
      [[ -f /etc/ustat.conf ]] && echo "* [ OK ] ustat.conf already in /etc"
      [[ -f /etc/ustat.conf ]] || cp ./etc/ustat.conf /etc/ustat.conf; echo "* [ OK ] ustat.conf coppied to /etc"
      [[ -x /usr/bin/ustat ]] && echo "* [ OK ] ustat script already installed"
      [[ -x /usr/bin/ustat ]] || cp ./ustat /usr/bin/ustat; chmod +x /usr/bin/ustat; echo "* [ OK ] ustat script installed"
      if [ -x /etc/init.d/ustat ]; then
        echo "* [ OK ] ustat service already installed, usage: /etc/init.d/ustat start"
      else
        cp ./etc/init.d/ustat /etc/init.d/ustat
        chmod +x /etc/init.d/ustat
        cd /etc/init.d/
        update-rc.d -v ustat start 99 3 . stop 99 6 . >/dev/null
        update-rc.d -f ustat defaults 99 >/dev/null
        cd /
        echo "* [ OK ] ustat service installed, usage: service ustat start|stop|restart"
      fi
#      sh /tmp/ustat-master/install.sh --force
#      cd /tmp; rm -R /tmp/ustat*
    fi
    systemctl restart ustat
#    /etc/init.d/ustat restart
    set +x
    exit 0
    ;;
    *)
    echo -e "* [error] wrong option, try: ustat -h"
    ;;
esac

# parse config file

parse_config_file () {
  config="/etc/ustat.conf"
}
config="/etc/ustat.conf"
INFLUXDB_DATABASE=$(sed -nE "/^\[\[outputs\.influxdb\]\]/ { :l /^\s*[^#].*/ p; n; /^\[/ q; b l; }" /etc/ustat.conf \
| grep database \
| sed 's/ *= */=/g' \
| sed 's/database=//g' \
| sed 's/"//g' \
| tr -d ' ')
echo $INFLUXDB_DATABASE

INFLUXDB_HOST=$(sed -nE "/^\[\[outputs\.influxdb\]\]/ { :l /^\s*[^#].*/ p; n; /^\[/ q; b l; }" /etc/ustat.conf \
| grep urls \
| sed 's/\[//g' \
| sed 's/\]//g' \
| sed 's/ *= */=/g' \
| sed 's/urls=//g' \
| sed 's/"//g' \
| tr -d ' ')
echo $INFLUXDB_HOST

INTERVAL=$(sed -nE "/^\[agent\]/ { :l /^\s*[^#].*/ p; n; /^\[/ q; b l; }" /etc/ustat.conf \
| grep " interval" \
| sed 's/ *= */=/g' \
| sed 's/interval=//g' \
| sed 's/"//g' \
| tr -d ' ')
echo $INTERVAL

INTERFACES=$(sed -nE "/^\[\[inputs\.net\]\]/ { :l /^\s*[^#].*/ p; n; /^\[/ q; b l; }" /etc/ustat.conf \
| grep "interfaces" \
| sed 's/ *= */=/g' \
| sed 's/\[/\(/g' \
| sed 's/\]/\)/g' \
| sed 's/,/ /g' \
| sed 's/interfaces=//g')
for NETWORK_INTERFACE in ${INTERFACES}; do
  NETWORK_INTERFACE=`echo $NETWORK_INTERFACE | tr -d '"()'`
  echo "$NETWORK_INTERFACE"
done

# . /etc/ustat.conf
# database based on mac address for now, TODO: crypted, based on UUID and/or hardware IDs
read_eth0_mac_address=`cat /sys/class/net/$NETWORK_INTERFACE/address | tr ':' ' ' | tr '\n' ' ' | sed 's/[[:space:]]//g'`

initialize_matrics () { # opendtsdb
  $read_eth0_mac_address
#  /usr/share/opentsdb/bin/tsdb mkmetric $eth0_mac_address.proc.loadavg.1m
#  /usr/share/opentsdb/bin/tsdb mkmetric $eth0_mac_address.proc.loadavg.5m
#  /usr/share/opentsdb/bin/tsdb mkmetric $eth0_mac_address.proc.loadavg.15m
}

read_proc_loadavg () {
  eth0_mac_address=$1
  awk -v now=`date +%s` -v host=`hostname` \
  '{ print "put '$eth0_mac_address'.proc.loadavg.1m " now " " $1 " host=" host;
  print "put '$eth0_mac_address'.proc.loadavg.5m " now " " $2 " host=" host;
  print "put '$eth0_mac_address'.proc.loadavg.15m " now " " $3 " host=" host; }' /proc/loadavg
}

read_proc_load () {
  NOW_TIMESTAMP=`date +%s`
  awk '{ print $1 }' /proc/loadavg
#  proc_loadawg_1=(awk '{ print $1 }' /proc/loadavg)
#  echo $proc_loadavg_1
}

read_network_stats () {
  TIMESTAMP=`date +%s`
  rx=$(grep $1 /proc/net/dev | awk '{print $2}' | tr -d ' ')
  tx=$(grep $1 /proc/net/dev | awk '{print $10}' | tr -d ' ')
  network_usage=$(cat /proc/net/dev | grep "$1:" | cut -f2 -d':' | awk '{print $1}' | tr -d ' ')
  return
}

show_databases () {
  show_db=$(curl -G "$INFLUXDB_HOST/query?pretty=true" -s --data-urlencode 'q=SHOW DATABASES')
  echo "$show_db"
  [[ $show_db =~ "\"$INFLUXDB_DATABASE\"" ]] && echo "... [OK] ... database '$INFLUXDB_DATABASE' found :)"
  [[ $show_db =~ "\"$INFLUXDB_DATABASE\"" ]] || echo ".. [NOK] ... database '$INFLUXDB_DATABASE' not found :("
  database_found="true"
  return
}

read_database () {
#  echo "read INFLUXDB_DATABASE at $INFLUXDB_HOST/query?db=$INFLUXDB_DATABASE&pretty=true"
  READ_DB=$(curl -G "$INFLUXDB_HOST/query?db=$INFLUXDB_DATABASE" -s --data-urlencode 'q=SELECT * FROM "$indluxdb_database"')
  echo "$READ_DB"
  if [[ $READ_DB =~ "database not found" ]]; then
    echo ".. [NOK] ... database '$INFLUXDB_DATABASE' not found :("
    DATABASE_FOUND="false"
  else
    echo "... [OK] ... database '$INFLUXDB_DATABASE' found :)"
    DATABASE_FOUND="true"
  fi
  return
}

create_database () {
  if [[ $DATABASE_FOUND = "false" ]]; then
    echo "DATABASE_FOUND=$DATABASE_FOUND ... create database '$INFLUXDB_DATABASE'"
    #  curl -XPOST "$INFLUXDB_HOST/query" -s --data-urlencode 'q=CREATE DATABASE "$INFLUXDB_DATABASE"'
    curl -XPOST "$INFLUXDB_HOST/query" -s --data-urlencode "q=CREATE DATABASE $INFLUXDB_DATABASE"
  else
    echo "DATABASE_FOUND=$DATABASE_FOUND ... '$INFLUXDB_DATABASE' database exists"
  fi
}

drop_database () {
  echo "drop database '$INFLUXDB_DATABASE'"
  curl -XPOST "$INFLUXDB_HOST/query" -s --data-urlencode "q=DROP DATABASE $INFLUXDB_DATABASE"
}

write_a_point_to_influxdb () {
  INFLUXDB_DATABASE="$1"
  measurement="$2"
  tag1="$3"
  rx="$4"
  TIMESTAMP="$5"
  curl -i XPOST "$INFLUXDB_HOST/write?db=$INFLUXDB_DATABASE&precision=s" --data-binary "$measurement,interface=$tag1 rx=$rx $TIMESTAMP"
}

write_loop () {
  while true; do
    curl -i XPOST "$INFLUXDB_HOST/write?db=h3test&precision=s" --data-binary "$INFLUXDB_DATABASE,interface=$NETWORK_INTERFACE rx=$rx $TIMESTAMP"
    sleep $interval
    echo "done..."
  done
}

ustat_help () {
  echo -e "usage: ustat <-option>\n\
  -b \t\t\t - verbose\n\
  -c \t\t\t - create database \n\
  -d \t\t\t - drop database\n\
  -i [database] \t - database name\n\
  -o [network_interface] \t network interface eg. -o eth0\n\
  -p \t\t\t read proc load\n\
  -r \t\t\t read database\n\
  -s \t\t\t show databases\n\
  -t [interval] \t interval in seconds eg. -t 5\n\
  -w \t\t\t write a point to influxdb database\n\
  --update|update|--install \t - update ustat files and service (or install if not exists)
  Examples:\n\
  ustat -w \t\t\t - write 1 network metric every INTERVAL time to default database from /etc/ustat.conf \n\
  ustat -i data1 -w \t\t\t - write
"
}

while getopts 'b c d h i: o p r s t: w' opt
do
  case "${opt}" in
    b ) _VERBOSE="true"
    ;;
    c )
    DATABASE_FOUND="false"
    while [[ $DATABASE_FOUND = "false" ]]; do
      read_database
      create_database
    done
    ;;
    d ) drop_database
    ;;
    h ) ustat_help
    ;;
    i ) INFLUXDB_DATABASE="$OPTARG"; echo "INFLUXDB_DATABASE=$OPTARG"
    ;;
    o ) read_network_stats $NETWORK_INTERFACE; echo -e "TIMESTAMP=$TIMESTAMP rx=$rx tx=$tx"
    ;;
    p ) read_proc_load
    ;;
    r ) read_database
    ;;
    s ) show_databases
    ;;
    t ) interval="$OPTARG"
    ;;
    w )
    read_database
    create_database
    while true; do
      read_network_stats $NETWORK_INTERFACE
      echo -e "INFLUXDB_DATABASE=$INFLUXDB_DATABASE measurement=$INFLUXDB_DATABASE tag1=$NETWORK_INTERFACE \
      rx=$rx tx=$tx TIMESTAMP=$TIMESTAMP"
      write_a_point_to_influxdb $INFLUXDB_DATABASE $INFLUXDB_DATABASE $NETWORK_INTERFACE $rx $TIMESTAMP
      sleep $INTERVAL
    done
    ;;
    :) echo "Option -$OPTARG requires an argument." >&2
    ;;
    * )  ustat_help; exit 0
    ;;
  esac
done
shift $((OPTIND-1))
